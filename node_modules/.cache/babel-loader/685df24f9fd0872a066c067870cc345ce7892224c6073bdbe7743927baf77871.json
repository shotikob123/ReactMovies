{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nexport const useDarkMode = () => {\n  _s();\n  const [theme, setTheme] = useState('light');\n  const setMode = mode => {\n    window.localStorage.setItem('theme', mode);\n    setTheme(mode);\n  };\n  const themeToggler = () => {\n    theme === 'light' ? setMode('dark') : setMode('light');\n  };\n  useEffect(() => {\n    const localTheme = window.localStorage.getItem('theme');\n    localTheme && setTheme(localTheme);\n  }, []);\n  return [theme, themeToggler];\n};\n_s(useDarkMode, \"Z8UCD9KudyQA62DCQ9e5cf9+m5k=\");","map":{"version":3,"names":["useState","useEffect","useDarkMode","_s","theme","setTheme","setMode","mode","window","localStorage","setItem","themeToggler","localTheme","getItem"],"sources":["/Users/giorgininidze/Documents/React Projects/dota2-info/src/hooks/useDarkMode.js"],"sourcesContent":["import { useState, useEffect } from 'react';\n\nexport const useDarkMode = () => {\n  const [theme, setTheme] = useState('light');\n\n  const setMode = (mode) => {\n    window.localStorage.setItem('theme', mode);\n    setTheme(mode);\n  };\n\n  const themeToggler = () => {\n    theme === 'light' ? setMode('dark') : setMode('light');\n  };\n\n  useEffect(() => {\n    const localTheme = window.localStorage.getItem('theme');\n    localTheme && setTheme(localTheme);\n  }, []);\n\n  return [theme, themeToggler];\n};\n"],"mappings":";AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAE3C,OAAO,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC/B,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGL,QAAQ,CAAC,OAAO,CAAC;EAE3C,MAAMM,OAAO,GAAIC,IAAI,IAAK;IACxBC,MAAM,CAACC,YAAY,CAACC,OAAO,CAAC,OAAO,EAAEH,IAAI,CAAC;IAC1CF,QAAQ,CAACE,IAAI,CAAC;EAChB,CAAC;EAED,MAAMI,YAAY,GAAGA,CAAA,KAAM;IACzBP,KAAK,KAAK,OAAO,GAAGE,OAAO,CAAC,MAAM,CAAC,GAAGA,OAAO,CAAC,OAAO,CAAC;EACxD,CAAC;EAEDL,SAAS,CAAC,MAAM;IACd,MAAMW,UAAU,GAAGJ,MAAM,CAACC,YAAY,CAACI,OAAO,CAAC,OAAO,CAAC;IACvDD,UAAU,IAAIP,QAAQ,CAACO,UAAU,CAAC;EACpC,CAAC,EAAE,EAAE,CAAC;EAEN,OAAO,CAACR,KAAK,EAAEO,YAAY,CAAC;AAC9B,CAAC;AAACR,EAAA,CAlBWD,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}